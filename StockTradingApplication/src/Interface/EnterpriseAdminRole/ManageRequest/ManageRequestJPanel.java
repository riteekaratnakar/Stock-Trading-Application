/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.EnterpriseAdminRole.ManageRequest;

import Business.Agent.Agent;
import Business.Customer.Customer;
import Business.Enterprice.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.StockTrading;
import Business.User.UserAccount;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import Utility.Constant;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Waqar
 */
public class ManageRequestJPanel extends javax.swing.JPanel {

    StockTrading stockTrading;
    Enterprise enterprise;
    JPanel rightContainer;
    UserAccount useraccount;

    /**
     * Creates new form ManageRequestJPaunel
     */
    public ManageRequestJPanel(JPanel rightContainer, StockTrading stockTrading, Enterprise enterprise, UserAccount useraccount) {
        initComponents();

        this.stockTrading = stockTrading;
        this.enterprise = enterprise;
        this.rightContainer = rightContainer;
        this.useraccount = useraccount;
        this.configureNetworkCombo();

        this.populateRecievedRequestTable(enterprise.getWorkQueueDirecoryRecieved());
        this.populateSentTable(enterprise.getWorkQueueDirecorySent());
        this.labelEnterprise.setText(enterprise.getEnterpriseName());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void configureNetworkCombo() {

        comboBoxNetwork.removeAllItems();
        for (Network network : this.stockTrading.getNetworkList()) {
            this.comboBoxNetwork.addItem(network);
            //this.configureEnterpriseCombo(network);
        }
    }

    private void configureEnterpriseCombo(Network network) {
        comboBoxEnterprise.removeAllItems();
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (this.enterprise.getEnterpriseName() != enterprise.getEnterpriseName()) {
                this.comboBoxEnterprise.addItem(enterprise);
            }
        }
    }

    private void populateTable(Enterprise enterprise) {
        if (enterprise.getOrganizationDirectoryList() != null) {

            DefaultTableModel model = (DefaultTableModel) this.tableCompany.getModel();
            model.setRowCount(0);
            for (Organization organization : enterprise.getOrganizationDirectoryList().getOrganizationList()) {
                Object[] row = new Object[3];
                row[0] = organization.getCompnayType();
                row[1] = organization.getCompanyName();
                row[2] = organization.getTotalNoOfshares();
                model.addRow(row);
            }
        }
    }

    private void populateRecievedRequestTable(WorkQueue workQueue) {

        if (workQueue == null) {
            return;
        }
         Collections.sort(workQueue.getWorkRequestList(), new Comparator<WorkRequest>() {
            @Override
            public int compare(WorkRequest o1, WorkRequest o2) {
                return (int) (o2.getRequestDate().compareTo(o1.getRequestDate()));
            }
        });

        if (workQueue.getWorkRequestList() != null) {
            DateFormat dateFormat = new SimpleDateFormat("MMM-dd-YYYY");

            DefaultTableModel model = (DefaultTableModel) this.tableRecieved.getModel();
            model.setRowCount(0);
            for (WorkRequest workRequest : workQueue.getWorkRequestList()) {
                Object[] row = new Object[7];
                row[0] = workRequest.getRequestRaiser();
                row[1] = workRequest.getStatus();
                row[2] = dateFormat.format(workRequest.getRequestDate());
                row[3] = workRequest.getNetworkName();
                row[4] = workRequest.getEnterpriseName();
                row[5] = workRequest.getCompanyName();
                row[6] = workRequest.getNoOfShare();
                model.addRow(row);
            }
        }
    }

    private void populateSentTable(WorkQueue workQueue) {

        if (workQueue == null) {
            return;
        }
        
        Collections.sort(workQueue.getWorkRequestList(), new Comparator<WorkRequest>() {
            @Override
            public int compare(WorkRequest o1, WorkRequest o2) {
                return (int) (o2.getRequestDate().compareTo(o1.getRequestDate()));
            }
        });

        if (workQueue.getWorkRequestList() != null) {
            DateFormat dateFormat = new SimpleDateFormat("MMM-dd-YYYY");

            DefaultTableModel model = (DefaultTableModel) this.tabletSent.getModel();
            model.setRowCount(0);
            for (WorkRequest workRequest : workQueue.getWorkRequestList()) {
                Object[] row = new Object[6];
                row[0] = workRequest.getStatus();
                row[1] = dateFormat.format(workRequest.getRequestDate());
                row[2] = workRequest.getNetworkName();
                row[3] = workRequest.getEnterpriseName();
                row[4] = workRequest.getCompanyName();
                row[5] = workRequest.getNoOfShare();

                model.addRow(row);
            }
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonRaiseRequest1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        comboBoxNetwork = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        comboBoxEnterprise = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCompany = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableRecieved = new javax.swing.JTable();
        buttonRaise = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabletSent = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        buttonApprove = new javax.swing.JButton();
        buttonDecline = new javax.swing.JButton();
        buttonBack = new javax.swing.JButton();
        textFieldNoOfShares = new javax.swing.JTextField();
        labelEnterprise = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        buttonRaiseRequest1.setText("Raise Request");

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel10.setText("Create Request");
        add(jLabel10);
        jLabel10.setBounds(111, 25, 109, 17);

        comboBoxNetwork.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxNetworkActionPerformed(evt);
            }
        });
        add(comboBoxNetwork);
        comboBoxNetwork.setBounds(226, 61, 136, 27);

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel11.setText("Request Sent To");
        add(jLabel11);
        jLabel11.setBounds(693, 97, 118, 17);

        jLabel8.setText("Network:");
        add(jLabel8);
        jLabel8.setBounds(15, 61, 57, 16);

        jLabel9.setText("Enterprise:");
        add(jLabel9);
        jLabel9.setBounds(15, 94, 67, 16);

        comboBoxEnterprise.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxEnterprise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxEnterpriseActionPerformed(evt);
            }
        });
        add(comboBoxEnterprise);
        comboBoxEnterprise.setBounds(226, 94, 136, 27);

        tableCompany.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Company Type", "Company Name", "Total Number of Shares"
            }
        ));
        jScrollPane3.setViewportView(tableCompany);

        add(jScrollPane3);
        jScrollPane3.setBounds(6, 133, 406, 344);

        tableRecieved.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Request Raiser", "Status", "Date", "Network", "Enterprise", "Compnay", "Shares"
            }
        ));
        jScrollPane2.setViewportView(tableRecieved);

        add(jScrollPane2);
        jScrollPane2.setBounds(512, 337, 541, 140);

        buttonRaise.setText("Raise Request");
        buttonRaise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRaiseActionPerformed(evt);
            }
        });
        add(buttonRaise);
        buttonRaise.setBounds(126, 490, 142, 29);

        tabletSent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Status", "Date", "Network", "Enterprise", "Compnay", "Shares"
            }
        ));
        jScrollPane4.setViewportView(tabletSent);

        add(jScrollPane4);
        jScrollPane4.setBounds(512, 133, 541, 141);

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel12.setText("Request Recieved");
        add(jLabel12);
        jLabel12.setBounds(721, 308, 126, 17);

        buttonApprove.setText("Approve");
        buttonApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApproveActionPerformed(evt);
            }
        });
        add(buttonApprove);
        buttonApprove.setBounds(689, 489, 109, 29);

        buttonDecline.setText("Decline");
        buttonDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeclineActionPerformed(evt);
            }
        });
        add(buttonDecline);
        buttonDecline.setBounds(844, 489, 102, 29);

        buttonBack.setText("<<Back");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });
        add(buttonBack);
        buttonBack.setBounds(32, 525, 142, 29);

        textFieldNoOfShares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldNoOfSharesActionPerformed(evt);
            }
        });
        add(textFieldNoOfShares);
        textFieldNoOfShares.setBounds(74, 489, 46, 28);

        labelEnterprise.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        labelEnterprise.setText("Enterprise");
        add(labelEnterprise);
        labelEnterprise.setBounds(438, 21, 96, 22);

        jLabel1.setText("Shares:");
        add(jLabel1);
        jLabel1.setBounds(23, 495, 45, 16);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/stock.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        add(jLabel2);
        jLabel2.setBounds(-4, -3, 970, 570);
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxNetworkActionPerformed

        Network network = (Network) this.comboBoxNetwork.getSelectedItem();
        if (network != null) {
            this.configureEnterpriseCombo(network);
        }

    }//GEN-LAST:event_comboBoxNetworkActionPerformed

    private void comboBoxEnterpriseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxEnterpriseActionPerformed
        // TODO add your handling code here:
        Enterprise enterprise = (Enterprise) this.comboBoxEnterprise.getSelectedItem();
        if (enterprise != null) {
            this.populateTable(enterprise);
            this.populateSentTable(enterprise.getWorkQueueDirecorySent());
        }
    }//GEN-LAST:event_comboBoxEnterpriseActionPerformed

    private WorkRequest getWorkRequest(int WorkRequestID, Enterprise enterprise) {
        for (WorkRequest workRequest : enterprise.getWorkQueueDirecorySent().getWorkRequestList()) {
            if (WorkRequestID == workRequest.getRequestID()) {
                return workRequest;
            }
        }
        return null;
    }

    private Enterprise getEnterpriseDetails(UserAccount useraccount) {

        for (Network network : this.stockTrading.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserList()) {
                    if (useraccount.getUserName().equals(userAccount.getUserName()) && useraccount.getPassword().equals(userAccount.getPassword())) {

                        return enterprise;
                    }
                }
            }
        }
        return null;
    }

    private void approveDecline(boolean isApprove) {
        int selectedRow = tableRecieved.getSelectedRow();
        if (selectedRow >= 0) {
            WorkRequest workRequest = this.enterprise.getWorkQueueDirecoryRecieved().getWorkRequestList().get(selectedRow);

            for (Organization organization : this.enterprise.getOrganizationDirectoryList().getOrganizationList()) {

                if (organization.getCompanyName().endsWith(workRequest.getCompanyName())) {

                    Enterprise enterpriseSender = this.getEnterpriseDetails(workRequest.getSender());
                    WorkRequest requestSender = this.getWorkRequest(workRequest.getRequestID(), enterpriseSender);
                    if (isApprove) {

                        boolean createNew = true;
                        for (Organization o : enterpriseSender.getOrganizationDirectoryList().getOrganizationList()) {

                            if (o.getCompanyName().equalsIgnoreCase(workRequest.getCompanyName())) {
                                createNew = false;
                                o.setTotalNoOfshares(o.getTotalNoOfshares() + workRequest.getNoOfShare());
                                organization.setTotalNoOfshares(organization.getTotalNoOfshares() - workRequest.getNoOfShare());
                            }
                        }

                        if (createNew) {
                            Organization org = new Organization();
                            org.setCompnayType(organization.getCompnayType());
                            org.setCompanyName(organization.getCompanyName());
                            org.setFaceValue(organization.getFaceValue());
                            org.setShareVale(organization.getShareVale());
                            org.setTotalNoOfshares(workRequest.getNoOfShare());
                            organization.setTotalNoOfshares(organization.getTotalNoOfshares() - workRequest.getNoOfShare());
                            enterpriseSender.getOrganizationDirectoryList().addOrganization(org);

                        }
                    }
                    workRequest.setStatus(isApprove ? Constant.RequestStatus.Approve : Constant.RequestStatus.Decline);
                    requestSender.setStatus(isApprove ? Constant.RequestStatus.Approve : Constant.RequestStatus.Decline);
                    break;
                }
            }
            this.populateRecievedRequestTable(enterprise.getWorkQueueDirecoryRecieved());
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Company!!");
        }

    }

    private void buttonRaiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRaiseActionPerformed
        // TODO add your handling code here:

        try {
            int selectedRow = tableCompany.getSelectedRow();
            if (selectedRow >= 0) {
                Network network = (Network) this.comboBoxNetwork.getSelectedItem();
                Enterprise enterprise = (Enterprise) this.comboBoxEnterprise.getSelectedItem();
                Organization organization = enterprise.getOrganizationDirectoryList().getOrganizationList().get(selectedRow);
                int noOfSahres = Integer.parseInt(this.textFieldNoOfShares.getText());
                if (organization.getTotalNoOfshares() > noOfSahres && noOfSahres > 0) {

                    int randomNo = (int) (Math.random() * 50 + 1);

                    WorkRequest requestR = enterprise.getWorkQueueDirecoryRecieved().createWorkQueueAccount();
                    WorkRequest requestS = this.enterprise.getWorkQueueDirecorySent().createWorkQueueAccount();

                    requestR.setSender(this.useraccount);
                    requestR.setStatus(Constant.RequestStatus.Pending);
                    requestR.setRequestRaiser(Constant.RequestRaiser.EnterpriseAdmin);
                    requestR.setNetworkName(network.getName());
                    requestR.setEnterpriseName(this.enterprise.getEnterpriseName());
                    requestR.setCompanyName(organization.getCompanyName());
                    requestR.setRequestID(randomNo);
                    requestR.setNoOfShare(noOfSahres);

                    requestS.setSender(this.useraccount);
                    requestS.setStatus(Constant.RequestStatus.Pending);
                    requestS.setRequestRaiser(Constant.RequestRaiser.EnterpriseAdmin);
                    requestS.setNetworkName(network.getName());
                    requestS.setEnterpriseName(enterprise.getEnterpriseName());
                    requestS.setCompanyName(organization.getCompanyName());
                    requestS.setRequestID(randomNo);
                    requestS.setNoOfShare(noOfSahres);

                    this.populateSentTable(this.enterprise.getWorkQueueDirecorySent());
                } else {
                    JOptionPane.showMessageDialog(null, "Please enter correct on of shares");

                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a Company!!");

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter valid value!!");
        }


    }//GEN-LAST:event_buttonRaiseActionPerformed

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        // TODO add your handling code here:
        rightContainer.remove(this);
        Component[] componentArray = rightContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) rightContainer.getLayout();
        layout.previous(rightContainer);
    }//GEN-LAST:event_buttonBackActionPerformed

    private void textFieldNoOfSharesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldNoOfSharesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldNoOfSharesActionPerformed

    private void buttonApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApproveActionPerformed
        // TODO add your handling code here:
        this.approveDecline(true);
    }//GEN-LAST:event_buttonApproveActionPerformed

    private void buttonDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeclineActionPerformed
        // TODO add your handling code here:
        this.approveDecline(false);
    }//GEN-LAST:event_buttonDeclineActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonApprove;
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonDecline;
    private javax.swing.JButton buttonRaise;
    private javax.swing.JButton buttonRaiseRequest1;
    private javax.swing.JComboBox comboBoxEnterprise;
    private javax.swing.JComboBox comboBoxNetwork;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel labelEnterprise;
    private javax.swing.JTable tableCompany;
    private javax.swing.JTable tableRecieved;
    private javax.swing.JTable tabletSent;
    private javax.swing.JTextField textFieldNoOfShares;
    // End of variables declaration//GEN-END:variables
}
