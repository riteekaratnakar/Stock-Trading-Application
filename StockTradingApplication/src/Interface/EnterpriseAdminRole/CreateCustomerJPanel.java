/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.EnterpriseAdminRole;

import Business.Agent.Agent;
import Business.Customer.Customer;
import Business.Enterprice.Enterprise;
import Business.Organization.Organization;
import Utility.Constant;
import Utility.Constant.UserType;
import Utility.Validation;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Waqar
 */
public class CreateCustomerJPanel extends javax.swing.JPanel {

    JPanel rightContainer;
    Enterprise enterprise;
     private String email;

    /**
     * Creates new form CustomerWorkArea
     */
    public CreateCustomerJPanel(JPanel rightContainer, Enterprise enterprise) {

        initComponents();

        this.rightContainer = rightContainer;
        this.enterprise = enterprise;
        this.configureCombox();
        this.populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        usernameJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        passwordJPasswordField = new javax.swing.JPasswordField();
        createJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        accountBalanceJTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        agentJComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableCutomerDetails = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFieldEmail = new javax.swing.JTextField();
        retypepasswordJPasswordField = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Name:");
        add(jLabel6);
        jLabel6.setBounds(290, 270, 110, 17);

        nameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameJTextFieldActionPerformed(evt);
            }
        });
        add(nameJTextField);
        nameJTextField.setBounds(430, 260, 140, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Username:");
        add(jLabel4);
        jLabel4.setBounds(290, 390, 110, 14);
        add(usernameJTextField);
        usernameJTextField.setBounds(430, 380, 140, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Password:");
        add(jLabel5);
        jLabel5.setBounds(290, 430, 120, 20);
        add(passwordJPasswordField);
        passwordJPasswordField.setBounds(430, 420, 140, 30);

        createJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        createJButton.setText("Create");
        createJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createJButtonActionPerformed(evt);
            }
        });
        add(createJButton);
        createJButton.setBounds(470, 500, 110, 25);

        backJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton);
        backJButton.setBounds(300, 500, 110, 25);

        accountBalanceJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountBalanceJTextFieldActionPerformed(evt);
            }
        });
        add(accountBalanceJTextField);
        accountBalanceJTextField.setBounds(430, 300, 140, 30);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Account Balance($):");
        add(jLabel7);
        jLabel7.setBounds(290, 310, 160, 17);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Create Cutomer ");
        add(jLabel1);
        jLabel1.setBounds(340, 190, 144, 24);

        agentJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        agentJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agentJComboBoxActionPerformed(evt);
            }
        });
        add(agentJComboBox);
        agentJComboBox.setBounds(430, 220, 140, 30);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Agent:");
        add(jLabel8);
        jLabel8.setBounds(290, 230, 70, 20);

        tableCutomerDetails.setBackground(new java.awt.Color(204, 204, 255));
        tableCutomerDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Account Balance", "User Name", "Password", "Associated Agent"
            }
        ));
        jScrollPane2.setViewportView(tableCutomerDetails);

        add(jScrollPane2);
        jScrollPane2.setBounds(0, 50, 835, 131);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("List of Cutomers:");
        add(jLabel9);
        jLabel9.setBounds(70, 30, 160, 17);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Email ID:");
        add(jLabel3);
        jLabel3.setBounds(290, 350, 80, 17);
        add(txtFieldEmail);
        txtFieldEmail.setBounds(430, 340, 140, 30);
        add(retypepasswordJPasswordField);
        retypepasswordJPasswordField.setBounds(430, 460, 140, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Re-type Password");
        add(jLabel2);
        jLabel2.setBounds(290, 470, 130, 17);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/EnterpriseAdminRole/stock.jpg"))); // NOI18N
        add(jLabel10);
        jLabel10.setBounds(0, 0, 900, 540);
    }// </editor-fold>//GEN-END:initComponents

    private void populateTable() {

        DefaultTableModel model = (DefaultTableModel) this.tableCutomerDetails.getModel();
        model.setRowCount(0);
        for (Agent agent : this.enterprise.getAgentDirectoryList().getAgentList()) {
            for (Customer customer : agent.getCustomerDirectoryList().getCustomerList()) {
                Object[] row = new Object[5];
                row[0] = customer.getName();
                row[1] = customer.getBalance();
                row[2] = customer.getUserAccount().getUserName();
                row[3] = customer.getUserAccount().getPassword();
                row[4] = agent.getName();
                model.addRow(row);
            }
        }
    }

    private void configureCombox() {

        agentJComboBox.removeAllItems();
        for (Agent agent : this.enterprise.getAgentDirectoryList().getAgentList()) {

            this.agentJComboBox.addItem(agent);
        }

    }
    
    
     public void mail() {

        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.socketFactory.port", "465");
        props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.port", "465");

        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication("riteekaratnakar95@gmail.com", "Riteeka_30");
            }
        }
        );
        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress("riteekaratnakar95@gmail.com"));
            System.out.print(email);
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));
            message.setSubject("Welcome to the JCoders project");
            message.setText("Hi new sign up done successfully");
            Transport.send(message);
            JOptionPane.showMessageDialog(null, "Mail is sent");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
     
     
     private boolean passwordRegex(String key) {
       Pattern userName = Pattern.compile("(?=.*[A-Za-z0-9])(?=.*[+_$]).{5,15}");
       Matcher m = userName.matcher(key);
       boolean matches = m.matches();
       return matches;
   }

 
  private boolean matchPassword(String key) {
       boolean match = false;
       if (key.equals(passwordJPasswordField.getText())) {
           return true;
       } else {
           return false;
       }
   }
  
  
   private boolean isEmpty(String value) {
       Pattern userName = Pattern.compile("^(?=\\s*\\S).*$");
       Matcher m = userName.matcher(value);
       boolean matches = m.matches();
       return !matches;
   }
   
   
  /* private boolean validations() {

       usernameJTextField.setBackground(Color.decode("#FFFFFF"));
       passwordJPasswordField.setBackground(Color.decode("#FFFFFF"));
       retypepasswordJPasswordField.setBackground(Color.decode("#FFFFFF"));
       accountBalanceJTextField.setBackground(Color.decode("#FFFFFF"));
       txtFieldEmail.setBackground(Color.decode("#FFFFFF"));

        if ( this.isEmpty(usernameJTextField.getText()) || this.isEmpty(accountBalanceJTextField.getText())|| this.isEmpty(txtFieldEmail.getText())) {
           JOptionPane.showMessageDialog(this, "Please enter valid inputs");
       //    usernameJTextField.setBackground(Color.decode("#FF9999"));
           passwordJPasswordField.setBackground(Color.decode("#FFFFFF"));
           retypepasswordJPasswordField.setBackground(Color.decode("#FFFFFF"));
           accountBalanceJTextField.setBackground(Color.decode("#FFFFFF"));
           txtFieldEmail.setBackground(Color.decode("#FFFFFF"));
           return false;
        }
           else if (!(passwordRegex(passwordJPasswordField.getText())) || this.isEmpty(passwordJPasswordField.getText())) {
           JOptionPane.showMessageDialog(this, "Enter valid Password.");
           passwordJPasswordField.setBackground(Color.decode("#FF9999"));
           return false;
       } else if (!(matchPassword(retypepasswordJPasswordField.getText()))) {
           JOptionPane.showMessageDialog(this, "Passwords not matching.");
           retypepasswordJPasswordField.setBackground(Color.decode("#FF9999"));
           return false;
       }
       return true;

   } */
    private void createJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createJButtonActionPerformed
       try{
        Agent agent = (Agent) this.agentJComboBox.getSelectedItem();
        String retypePassword = String.valueOf(retypepasswordJPasswordField.getPassword());
        String username = usernameJTextField.getText();
        String password = String.valueOf(passwordJPasswordField.getPassword());
        String name = nameJTextField.getText();
        email = txtFieldEmail.getText();
        float accountBlance = Float.parseFloat(this.accountBalanceJTextField.getText());
 if(username.length() == 0 || username == null || password.length() == 0 || password == null || name.length() == 0 || retypePassword.length() ==0 || email.length() == 0){
            JOptionPane.showMessageDialog(null, "Please complete all required fields");
        }
        else if(!Validation.isStringOnlyAlphabet(nameJTextField.getText())){
            JOptionPane.showMessageDialog(null, "Please enter a valid text");
            
        }
        else if(!Validation.validateTextFieldsForAmount(accountBalanceJTextField)){
            JOptionPane.showMessageDialog(null, "Please enter valid amount ");
        }
        else if(String.valueOf(accountBlance).matches("[a-zA-Z]")){
         JOptionPane.showMessageDialog(null, "Please Enter Numeric Values");
        }
    /*    else if(!Validation.validateTextFieldForPercentage(brokerageTextField)){
           JOptionPane.showMessageDialog(null, "Please enter valid brokerage");
        }
*/         else if(!Validation.checkUniquenessOfUserNameCustomer(username, agent)){
            JOptionPane.showMessageDialog(null, "Username Already Exists");
        } 
        else if(!Validation.validateTextFieldsForEmailId(txtFieldEmail)){
            JOptionPane.showMessageDialog(null, "Please enter valid email -id ");
        }
        else if(!password.equals(retypePassword)){
            JOptionPane.showMessageDialog(null, "Password does not match");
        }
        else if(!(passwordRegex(passwordJPasswordField.getText()))){
        JOptionPane.showMessageDialog(this, "Enter valid Password.");
           passwordJPasswordField.setBackground(Color.decode("#FF9999"));
        }
 
        else{
        Customer customer = agent.getCustomerDirectoryList().createAndAddCustomer();
        customer.setName(name);
        customer.setBalance(accountBlance);
        customer.getUserAccount().setName(name);
        customer.getUserAccount().setUserName(username);
        customer.getUserAccount().setPassword(password);
        customer.getUserAccount().setType(UserType.Customer);
        customer.setEmail(email);
        mail();
         this.populateTable();
       }
       }
      catch(NumberFormatException e){
        JOptionPane.showMessageDialog(null, "Please enter valid inputs","Incorrect Input", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_createJButtonActionPerformed
   
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        rightContainer.remove(this);
        Component[] componentArray = rightContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) rightContainer.getLayout();
        layout.previous(rightContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void nameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameJTextFieldActionPerformed

    private void accountBalanceJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountBalanceJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_accountBalanceJTextFieldActionPerformed

    private void agentJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agentJComboBoxActionPerformed

        this.usernameJTextField.setText("");
        this.nameJTextField.setText("");
        this.passwordJPasswordField.setText("");
        this.accountBalanceJTextField.setText("");


    }//GEN-LAST:event_agentJComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountBalanceJTextField;
    private javax.swing.JComboBox agentJComboBox;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton createJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JPasswordField passwordJPasswordField;
    private javax.swing.JPasswordField retypepasswordJPasswordField;
    private javax.swing.JTable tableCutomerDetails;
    private javax.swing.JTextField txtFieldEmail;
    private javax.swing.JTextField usernameJTextField;
    // End of variables declaration//GEN-END:variables
}
